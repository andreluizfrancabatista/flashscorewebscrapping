# -*- coding: utf-8 -*-
"""WebScraping - FlashScore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qr3mASEik_iesvvoel-5v63csKk1feuj

Criado por:
*   Eduardo Lemos (@esniq1)
*   Leandro Filho (@futpythontrader)

# Instalando as Bibliotecas e as Dependências
"""

# Instalando o Selenium
# !pip install selenium

# Atualizando o Ubuntu para executar corretamento o apt-install
# !apt-get update

# Instalando o ChromeDrive e Trazendo ele para a Pasta Local
# !apt install chromium-chromedriver

# !cp /usr/lib/chromium-browser/chromedriver /usr/bin
import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

"""# Configuração do Web-Driver"""

# Utilizando o WebDriver do Selenium
from selenium import webdriver

# Instanciando o Objeto ChromeOptions
options = webdriver.ChromeOptions()

# Passando algumas opções para esse ChromeOptions
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

# Criação do WebDriver do Chrome
wd_Chrome = webdriver.Chrome('chromedriver',options=options)

"""# Importando as Bibliotecas"""

import pandas as pd
import time
from tqdm import tqdm
from selenium.webdriver.common.by import By

"""# Iniciando a Raspagem de Dados"""

# Com o WebDrive a gente consegue a pedir a página (URL)
wd_Chrome.get("https://www.flashscore.com/")

## Para jogos do dia seguinte
#wd_Chrome.find_element(By.CSS_SELECTOR,'div.calendar__navigation--tomorrow').click()
#time.sleep(2)




# Pegando o ID dos Jogos
id_jogos = []
## Para jogos agendados (próximos)
jogos = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.event__match--scheduled')

## Para jogos ao vivo (live)
jogos = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.event__match--live')

for i in jogos:
    id_jogos.append(i.get_attribute("id"))

# Exemplo de ID de um jogo: 'g_1_Gb7buXVt'    
id_jogos = [i[4:] for i in id_jogos]

jogo = {'Date':[],'Time':[],'Country':[],'League':[],'Home':[],'Away':[],'Odds_H':[],'Odds_D':[],'Odds_A':[]}

# for link in tqdm(id_jogos, total=len(id_jogos)):
#     wd_Chrome.get(f'https://www.flashscore.com/match/{link}/#/match-summary')
    
#     # Pegando as Informacoes Básicas do Jogo
#     try:
#         Date = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__startTime').text.split(' ')[0]
#         Time = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__startTime').text.split(' ')[1]
#         Country = wd_Chrome.find_element(By.CSS_SELECTOR,'span.tournamentHeader__country').text.split(':')[0]
#         League = wd_Chrome.find_element(By.CSS_SELECTOR,'span.tournamentHeader__country')
#         League = League.find_element(By.CSS_SELECTOR,'a').text
#         Home = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__home')
#         Home = Home.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
#         Away = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__away')
#         Away = Away.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
        
#         # Match Odds
#         wd_Chrome.get(f'https://www.flashscore.com/match/{link}/#/odds-comparison/1x2-odds/full-time')
#         time.sleep(2)
#         celulas = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.ui-table__row')
        
#         Odds_H = 0
#         Odds_D = 0
#         Odds_A = 0
        
#         if 'title="bet365"' in str(wd_Chrome.find_element(By.CSS_SELECTOR,'div.ui-table.oddsCell__odds')):
#             for celula in celulas:
#                 bookie = celula.find_element(By.CSS_SELECTOR,'img.prematchLogo')
#                 bookie = bookie.get_attribute('title')
#                 if ((bookie == 'bet365') & (Odds_H == 0)) | ((bookie == 'Betfair') & (Odds_H == 0)):
#                     Odds_H = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[0].text
#                     Odds_D = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[1].text 
#                     Odds_A = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[2].text
#                 else:
#                     pass
#         else:
#             for celula in celulas:
#                 Odds_H = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[0].text
#                 Odds_D = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[1].text 
#                 Odds_A = celula.find_elements(By.CSS_SELECTOR,'a.oddsCell__odd')[2].text

#     except:
#         pass

#     print(Date,Time,Country,League,Home,Away,Odds_H,Odds_D,Odds_A) 

#     jogo['Date'].append(Date)
#     jogo['Time'].append(Time)
#     jogo['Country'].append(Country)
#     jogo['League'].append(League)
#     jogo['Home'].append(Home)
#     jogo['Away'].append(Away)
#     jogo['Odds_H'].append(Odds_H)
#     jogo['Odds_D'].append(Odds_D)
#     jogo['Odds_A'].append(Odds_A)

# df = pd.DataFrame(jogo)
# df = df[(df.Odds_H != 0)]
# df.reset_index(inplace=True, drop=True)
# df.index = df.index.set_names(['Nº'])
# df = df.rename(index=lambda x: x + 1)
# df

# df.to_excel("jogos_ao_vivo.xlsx")

## Recuperando as estatísticas das partidas ao vivo
jogo = {'Date':[],'Time':[],'Country':[],'League':[],'Home':[],'Away':[],'Odds_H':[],'Odds_D':[],'Odds_A':[]}

stats = {'Ball Possession':[],'Goal Attempts':[],'Shots on Goal':[],'Shots off Goal':[],'Blocked Shots':[],'Free Kicks':[],'Corner Kicks':[],'Offsides':[],'Throw-in':[],'Goalkeeper Saves':[],'Fouls':[],'Yellow Cards':[],'Total Passes':[],'Completed Passes':[],'Tackles':[],'Attacks':[],'Dangerous Attacks':[]}

# for link in tqdm(id_jogos, total=len(id_jogos)):
for link in id_jogos:
    wd_Chrome.get(f'https://www.flashscore.com/match/{link}/#/match-summary/match-statistics/0')
    time.sleep(2)
    
    # Pegando as estatísticas de cada jogo ao vivo
    try:
        Date = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__startTime').text.split(' ')[0]
        Home = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__home')
        Home = Home.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
        Away = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__away')
        Away = Away.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
        HomeGoals = wd_Chrome.find_element(By.CSS_SELECTOR, 'div.detailScore__wrapper > span:nth-child(1)').text
        AwayGoals = wd_Chrome.find_element(By.CSS_SELECTOR, 'div.detailScore__wrapper > span:nth-child(3)').text
        HT = wd_Chrome.find_element(By.CSS_SELECTOR, 'div.detailScore__status > span').text
        TimePlayed = wd_Chrome.find_element(By.CSS_SELECTOR, 'div.eventAndAddedTime > span').text
        StatsElements = wd_Chrome.find_elements(By.CSS_SELECTOR, 'div.stat__category')
        print()
        print(f'{Home} {HomeGoals} x {AwayGoals} {Away}')
        print(f'{HT} - {TimePlayed}')
        for stat in StatsElements:
          category_name = stat.find_element(By.CSS_SELECTOR, 'div.stat__categoryName').text
          home_value = stat.find_element(By.CSS_SELECTOR, 'div.stat__homeValue').text
          away_value = stat.find_element(By.CSS_SELECTOR, 'div.stat__awayValue').text
          print(f'{category_name}: {home_value}/{away_value}')
    except:
        print(f'Erro de exception')
        pass
    
