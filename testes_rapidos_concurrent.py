# -*- coding: utf-8 -*-
"""WebScraping - FlashScore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qr3mASEik_iesvvoel-5v63csKk1feuj

Criado por:
*   Eduardo Lemos (@esniq1)
*   Leandro Filho (@futpythontrader)

# Instalando as Bibliotecas e as Dependências
"""

# Instalando o Selenium
# !pip install selenium

# Atualizando o Ubuntu para executar corretamento o apt-install
# !apt-get update

# Instalando o ChromeDrive e Trazendo ele para a Pasta Local
# !apt install chromium-chromedriver

# !cp /usr/lib/chromium-browser/chromedriver /usr/bin
import time
import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

from itertools import cycle
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, wait
from functools import reduce

"""# Importando as Bibliotecas"""
import pandas as pd
import time
from tqdm import tqdm
from selenium.webdriver.common.by import By

"""# Configuração do Web-Driver"""
# Utilizando o WebDriver do Selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def getinfo(driver, link):
    jogo = {
        'Date':[],'Time':[],'Country':[],'League':[],'Home':[],'Away':[],
        'golshtHome':[], 'totalHome':[], 'AvgHome':[], 
        'golshtAway':[], 'totalAway':[], 'AvgAway':[], 
        'pHome':[], 'pAway':[], 'Sum':[]
    }
    wd_Chrome = driver
    wd_Chrome.get(f'https://www.flashscore.com/match/{link}/#/match-summary/') # English
    try:
        Date = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__startTime').text.split(' ')[0]
        Time = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__startTime').text.split(' ')[1]
        Country = wd_Chrome.find_element(By.CSS_SELECTOR,'span.tournamentHeader__country').text.split(':')[0]
        League = wd_Chrome.find_element(By.CSS_SELECTOR,'span.tournamentHeader__country')
        League = League.find_element(By.CSS_SELECTOR,'a').text
        Home = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__home')
        LinkHome = Home.find_element(By.CSS_SELECTOR,'div.participant__participantName')
        LinkHome = LinkHome.find_element(By.TAG_NAME, 'a').get_attribute('href')
        Home = Home.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
        Away = wd_Chrome.find_element(By.CSS_SELECTOR,'div.duelParticipant__away')
        LinkAway = Away.find_element(By.CSS_SELECTOR,'div.participant__participantName')
        LinkAway = LinkAway.find_element(By.TAG_NAME, 'a').get_attribute('href')
        Away = Away.find_element(By.CSS_SELECTOR,'div.participant__participantName').text
        # Calcular a porcentagem de over 0,5 no HT de cada time
        links = [LinkHome, LinkAway]
        for index, sublink in enumerate(links):
            wd_Chrome.get(f'{sublink}results/') # English
            jogos = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.event__match--static') #OR 'div.event__match--last'
            total, golsht = 0, 0
            gols = 0
            # print(f'{index}: {sublink}results/') # English
            for i in jogos:
                try:
                    golsHome = i.find_element(By.CSS_SELECTOR, 'div.event__part--home').text
                    golsHome = int(golsHome[1:2])
                    gols += golsHome
                    golsAway = i.find_element(By.CSS_SELECTOR, 'div.event__part--away').text
                    golsAway = int(golsAway[1:2])
                    gols += golsAway
                    # print(f'{golsHome}x{golsAway} ', end="")
                    total += 1
                    if((golsHome+golsAway) > 0):
                        golsht += 1
                    if(total>=15):
                        break
                except:
                    # print(f'?x? ', end="")
                    pass
            # print()
            if(index==0):
                pHome = golsht/total
                totalHome = total
                golshtHome = golsht
                mediaGolsHTHome = gols/total
                # print(f'pHome:{pHome*100:.2f} jogos:{totalHome} jogosComGolHT:{golshtHome} média:{mediaGolsHTHome:.2f} gols:{gols}')
            if(index==1):
                pAway = golsht/total
                totalAway = total
                golshtAway = golsht
                mediaGolsHTAway = gols/total
                # print(f'pAway:{pAway*100:.2f} jogos:{totalAway} jogosComGolHT:{golshtAway} média:{mediaGolsHTAway:.2f} gols:{gols}')
            # print()  
    except:
        pass
    # print(f'{Date}, {Time}, {Country}, {League}\n{Home} x {Away}\n')
    jogo['Date'].append(Date.replace(".", "/"))
    jogo['Time'].append(Time)
    jogo['Country'].append(Country.replace(";", "-"))
    jogo['League'].append(League.replace(";", "-"))
    jogo['Home'].append(Home.replace(";", "-"))
    jogo['Away'].append(Away.replace(";", "-"))
    jogo['golshtHome'].append(golshtHome)
    jogo['totalHome'].append(totalHome)
    jogo['AvgHome'].append(str(round(mediaGolsHTHome, 4)).replace(".", ","))
    jogo['golshtAway'].append(golshtAway)
    jogo['totalAway'].append(totalAway)
    jogo['AvgAway'].append(str(round(mediaGolsHTAway, 4)).replace(".", ","))
    jogo['pHome'].append(str(round(pHome, 4)).replace(".", ","))
    jogo['pAway'].append(str(round(pAway, 4)).replace(".", ","))
    jogo['Sum'].append(
        str(round((round(pHome, 4) + round(pAway, 4)), 4)).replace(".", ",")
        )
    return jogo

if __name__ == '__main__':
    # Instanciando o Objeto ChromeOptions
    options = webdriver.ChromeOptions()

    # Passando algumas opções para esse ChromeOptions
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--disable-crash-reporter')
    options.add_argument('--log-level=3')

    # Criação do WebDriver do Chrome
    wd_Chrome = webdriver.Chrome('chromedriver',options=options)
    wd_Chrome1 = webdriver.Chrome('chromedriver',options=options)
    wd_Chrome2 = webdriver.Chrome('chromedriver',options=options)
    wd_Chrome3 = webdriver.Chrome('chromedriver',options=options)

    drivers = [wd_Chrome1, wd_Chrome2, wd_Chrome3]

    """# Iniciando a Raspagem de Dados"""

    # Com o WebDrive a gente consegue a pedir a página (URL)
    wd_Chrome.get("https://www.flashscore.com/") 
    time.sleep(2)

    ## Para jogos do dia seguinte / Comentar essa linha para os jogos agendados de hoje 
    wd_Chrome.find_element(By.CSS_SELECTOR,'button.calendar__navigation--tomorrow').click()
    time.sleep(2)

    # Pegando o ID dos Jogos
    id_jogos = []
    ## Para jogos agendados (próximos)
    jogos = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.event__match--scheduled')

    ## Para jogos ao vivo (live)
    # jogos = wd_Chrome.find_elements(By.CSS_SELECTOR,'div.event__match--live')

    for i in jogos:
        id_jogos.append(i.get_attribute("id"))

    # Exemplo de ID de um jogo: 'g_1_Gb7buXVt'    
    id_jogos = [i[4:] for i in id_jogos]

    # Limitar o tamanho da análise
    # lim = 5
    # if(len(id_jogos)>lim):
    #     id_jogos = id_jogos[:lim]

    # Exibir a quantidade de jogos coletados
    print(f'Jogos: {len(id_jogos)}')

    # Teste com múltiplas instâncias 
    start_time = time.time()
    futures = []
    with ThreadPoolExecutor(max_workers=3) as ex:
        zip_list = zip(id_jogos, cycle(drivers)) if len(id_jogos) > len(drivers) else zip(cycle(id_jogos), drivers)
        for par in zip_list:
            try:
                futures.append(ex.submit(getinfo,par[1],par[0])) # getinfo(driver, link)
            except:
                pass
            
    wait(futures)
    
    df = pd.DataFrame()
    for future in futures:
        try:
            # print(future.result())
            df2 = pd.DataFrame(future.result())
            df = df.append(df2, ignore_index=True)
        except:
            pass

    Date = df['Date'].values[0]
    df = df.sort_values(by=['Sum'], ascending=False)
    df.reset_index(inplace=True, drop=True)
    df.index = df.index.set_names(['Nº'])
    df = df.rename(index=lambda x: x + 1)
    filename = "lista_de_jogos/jogos_do_dia_"+Date.replace(".", "_")+"_last15_O05HT_concurrent.csv"
    df.to_csv(filename, sep=";")

    print(f'% Futures: --- {time.time() - start_time} seconds --- %')














    # pool = ThreadPoolExecutor(max_workers=4)
    # results = pool.map(getinfo, id_jogos)

    # for res in results:
    #     print(res)
    
    # pool.shutdown()
    
    # futures = []
    # start_time = time.time()
    # # # creating multiple executor - Parallel processing
    # with ThreadPoolExecutor() as executor, webdriver.Chrome('chromedriver',options=options) as driver:
    #     for link in id_jogos:
    #         futures.append(executor.submit(getinfo, driver, link))
    
    # wait(futures)
    
    # # for future in futures:
    # #     print(future.result())
    # print(f'% Futures: --- {time.time() - start_time} seconds --- %')
    # print()
    # print()

    #################
    #start_time = time.time()
    # Sem concurrent
    #result = map(getinfo, id_jogos)
    #print(list(result))

    #print(f'% Serial: --- {time.time() - start_time} seconds --- %')


    ##################
    # With Threads
    # start_time = time.time()
    # pool = ThreadPoolExecutor()
    # results = list(pool.map(getinfo, id_jogos))
    # print(results)
    # print(f'% With threads: --- {time.time() - start_time} seconds --- %')

    ##################
    # With subprocess
    # start_time = time.time()
    # pool = ProcessPoolExecutor(max_workers=2)
    # results = list(pool.map(getinfo, id_jogos))
    # print(f'% With subprocess: --- {time.time() - start_time} seconds --- %')
